name: Run the WowAHaha project

on:
  schedule:
    - cron: "33 * * * *"
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  fork:
    branches:
      - main
  status:
    branches:
      - main
  issues:
    branches:
      - main
env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  dotnet-version: '8.0.x'
  dotnet-configuration: Release
  DOTNET_NOLOGO: true
  PROGRAM_NAME: WowAHaha

concurrency:
  group: "${{ github.workflow }}-${{ github.head_ref || github.run_id }}"
  cancel-in-progress: false

jobs:
  run-every-hour:
    name: Run the WowAHaha project
    timeout-minutes: 10
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      attestations: write
      packages: write
      contents: write
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          submodules: 'recursive'
      - name: Setup .NET Core SDK ${{ env.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.dotnet-version }}

      - name: Cache NuGet dependencies
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-run-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      - name: Install dependencies
        run: dotnet restore

      - name: Cache build output
        uses: actions/cache@v3
        with:
          path: ${{ env.PROGRAM_NAME }}/bin/${{ env.dotnet-configuration }}
          key: ${{ runner.os }}-${{ env.PROGRAM_NAME }}-build-output-${{ env.dotnet-configuration }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.PROGRAM_NAME }}-build-output-

      - name: Build
        run: |
          mkdir -p wd
          dotnet build --configuration ${{ env.dotnet-configuration }} --no-restore

      - name: Cache wd directory
        uses: actions/cache@v3
        with:
          path: wd
          key: ${{ runner.os }}-${{ env.PROGRAM_NAME }}-csv-wd-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.PROGRAM_NAME }}-csv-wd-

      - name: Checks and Steps Summary
        run: |
          {
            echo "## ⚠️ Secret Checks"
            if [ -z "${{ secrets.BattleNetClientId }}" ] || [ -z "${{ secrets.BattleNetClientSecret }}" ]; then
              echo "Required secrets are not set. Please set BattleNetClientId and BattleNetClientSecret in your repository secrets." 1>&2
              echo ":x: **Error**: Required secrets are not set. Please set *BattleNetClientId* and *BattleNetClientSecret* in your repository secrets." >> $GITHUB_STEP_SUMMARY
              exit 1
            else
              echo ":white_check_mark: Required secrets are set." >> $GITHUB_STEP_SUMMARY
            fi

            if [ -z "${{ secrets.BattleNetCredentialEncryptionKey }}" ]; then
              echo ":warning: **Note**: Not using encryption key." >> $GITHUB_STEP_SUMMARY
            else
              echo ":lock: Using custom encryption key." >> $GITHUB_STEP_SUMMARY
            fi

            echo "## :computer: System Information" >> $GITHUB_STEP_SUMMARY
            echo "| Property               | Value                  |" >> $GITHUB_STEP_SUMMARY
            echo "|------------------------|------------------------|" >> $GITHUB_STEP_SUMMARY
            echo "| :computer: Processors  | $(nproc)               |" >> $GITHUB_STEP_SUMMARY
            echo "| :gear: Architecture    | $(uname -m)            |" >> $GITHUB_STEP_SUMMARY
            echo "| :rocket: .NET Version  | $(dotnet --version)    |" >> $GITHUB_STEP_SUMMARY
            echo "| :bust_in_silhouette: GitHub Actor | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
            echo "| :tada: GitHub Event    | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
            echo "| :package: OS           | $(uname -s)            |" >> $GITHUB_STEP_SUMMARY
            echo "| :package: OS Version   | $(uname -v)            |" >> $GITHUB_STEP_SUMMARY
          }

      - name: Summary of the previously generated CSV files
        shell: python
        run: |
          import os
          import pathlib
          import hashlib

          summary_file = pathlib.Path(os.getenv('GITHUB_STEP_SUMMARY'))
          with open(summary_file, 'a') as f:
            f.write('## :file_folder: **Newly** Generated CSV files\n')
            f.write('| Name               | SHA256 Hash                  | File Size                    |\n')
            f.write('|-------------------------|------------------------------|------------------------------|\n')
            for file in sorted(set(pathlib.Path('wd').rglob('*.csv'))):
              hash = hashlib.sha256()
              with open(file, 'rb') as f:
                hash.update(f.read())
              size = pathlib.Path(file).stat().st_size
              size_suffixes = ['B', 'KB', 'MB', 'GB', 'TB']
              size_index = 0
              while size >= 1024 and size_index < len(size_suffixes):
                size /= 1024
                size_index += 1
              size = f'{size:.2f} {size_suffixes[size_index]}'
              f.write(f"| {file.relative_to(file.parent.parent)} | {hash.hexdigest()} | {size} |\n")
            f.write('|-------------------------|------------------------------|------------------------------|\n')

      - name: Run WowAHaha
        if: ${{ (vars.ALLOWED_ACTOR || github.repository_owner) == github.actor || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' }}
        run: |
          mkdir -p wd
          cd wd
          $env:AHaha_BattleNetWebApi:clientId='${{ secrets.BattleNetClientId }}';
          $env:AHaha_BattleNetWebApi:clientSecret='${{ secrets.BattleNetClientSecret }}';
          $env:AHaha_BattleNetWebApi:CredentialEncryptionKey='${{ secrets.BattleNetCredentialEncryptionKey }}';
          dotnet run --no-build --configuration Release --project "../${{ env.PROGRAM_NAME }}"
        shell: pwsh

      - name: Summary of the generated CSV files
        shell: python
        run: |
          import os
          import sys
          import pathlib
          import hashlib

          summary_file = pathlib.Path(os.getenv('GITHUB_STEP_SUMMARY'))
          with open(summary_file, 'a') as f:
            f.write('## :file_folder: **Newly** Generated CSV files\n')
            f.write('| Name               | SHA256 Hash                  | File Size                    |\n')
            f.write('|-------------------------|------------------------------|------------------------------|\n')
            for file in sorted(set(pathlib.Path('wd').rglob('*.csv'))):
              hash = hashlib.sha256()
              with open(file, 'rb') as f:
                hash.update(f.read())
              size = pathlib.Path(file).stat().st_size
              size_suffixes = ['B', 'KB', 'MB', 'GB', 'TB']
              size_index = 0
              while size >= 1024 and size_index < len(size_suffixes):
                size /= 1024
                size_index += 1
              size = f'{size:.2f} {size_suffixes[size_index]}'
              print(f"| {file.relative_to(file.parent.parent)} | {hash.hexdigest()} | {size} |\n")
              try:
                f.write(f"| {file.relative_to(file.parent.parent)} | {hash.hexdigest()} | {size} |\n")
              except Exception:
                print(f"Error writing to {summary_file}: {sys.exc_info()[1]}", file=sys.stderr)
            f.write('|-------------------------|------------------------------|------------------------------|\n')

      - name: Attest Build Provenance of csv files
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'wd/*'

      - name: Create artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.PROGRAM_NAME }}_csv
          path: wd/*