name: Run the WowAHaha project

on:
  schedule:
    - cron: "33 * * * *"
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  fork:
    branches:
      - main
  status:
    branches:
      - main
  issues:
    branches:
      - main
env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  dotnet-version: '8.0.x'
  dotnet-configuration: Release
  DOTNET_NOLOGO: true
  PROGRAM_NAME: WowAHaha
  LATEST_CSV_TAG: latest_csv
  RELEASE_CSV_PREFIX: wow_ah_csv_
  FORCE_RELEASE: true

concurrency:
  group: "${{ github.workflow }}-${{ github.actor }}"
  cancel-in-progress: false

jobs:
  run-every-hour:
    name: Run the WowAHaha project
    timeout-minutes: 25
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      attestations: write
      packages: write
      contents: write
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          submodules: 'recursive'
      - name: Setup .NET Core SDK ${{ env.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.dotnet-version }}
      - name: Install dependencies
        run: dotnet restore

      - name: Cache build output
        uses: actions/cache@v3
        with:
          path: ${{ env.PROGRAM_NAME }}/bin/${{ env.dotnet-configuration }}
          key: ${{ runner.os }}-${{ env.PROGRAM_NAME }}-${{ github.sha }}-build-output-${{ env.dotnet-configuration }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.PROGRAM_NAME }}-${{ github.sha }}-build-output-

      - name: Build
        run: |
          dotnet build --configuration ${{ env.dotnet-configuration }} --no-restore

      - name: Cache wd directory
        uses: actions/cache@v3
        id: wd_cache
        with:
          path: wd
          enableCrossOsArchive: true
          key: ${{ env.PROGRAM_NAME }}-csv-wd-${{ runner.os }}-${{ github.sha }}-${{ github.run_id }}-${{ github.run_attempt }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ env.PROGRAM_NAME }}-csv-wd-
            
      - name: Download latest files from Release
        uses: robinraju/release-downloader@v1
        id: download_release
        if: (steps.wd_cache.outputs.cache-hit != 'true')
        with:
          tag: ${{ env.LATEST_CSV_TAG }}
          fileName: '${{ env.RELEASE_CSV_PREFIX }}*.zip'
          extract: false
          
      - name: Unzip latest files
        run: |
          if [ ! -d wd ] || [ -z "$(ls -A wd/)" ]; then
            mkdir -p wd
            if [ -n "${{ steps.download_release.outputs.downloaded_files }}" ]; then
              downloaded_file=$(echo "${{ fromJson(steps.download_release.outputs.downloaded_files)[0] }}" | tr -d '"')
              unzip -d wd $downloaded_file
              echo ":package: Extracted files from $downloaded_file" >> $GITHUB_STEP_SUMMARY
            else
              echo "No downloaded files found. Aborting." 1>&2
              exit 0
            fi
          fi

      - name: Checks and Steps Summary
        run: |
          {
            echo "## ⚠️ Secret Checks"
            if [ -z "${{ secrets.BattleNetClientId }}" ] || [ -z "${{ secrets.BattleNetClientSecret }}" ]; then
              echo "Required secrets are not set. Please set BattleNetClientId and BattleNetClientSecret in your repository secrets." 1>&2
              echo ":x: **Error**: Required secrets are not set. Please set *BattleNetClientId* and *BattleNetClientSecret* in your repository secrets." >> $GITHUB_STEP_SUMMARY
              exit 1
            else
              echo ":white_check_mark: Required secrets are set." >> $GITHUB_STEP_SUMMARY
            fi

            if [ -z "${{ secrets.BattleNetCredentialEncryptionKey }}" ]; then
              echo ":warning: **Note**: Not using encryption key." >> $GITHUB_STEP_SUMMARY
            else
              echo ":lock: Using custom encryption key." >> $GITHUB_STEP_SUMMARY
            fi

            echo "## :computer: System Information" >> $GITHUB_STEP_SUMMARY
            echo "| Property               | Value                  |" >> $GITHUB_STEP_SUMMARY
            echo "|------------------------|------------------------|" >> $GITHUB_STEP_SUMMARY
            echo "| :computer: Processors  | $(nproc)               |" >> $GITHUB_STEP_SUMMARY
            echo "| :gear: Architecture    | $(uname -m)            |" >> $GITHUB_STEP_SUMMARY
            echo "| :rocket: .NET Version  | $(dotnet --version)    |" >> $GITHUB_STEP_SUMMARY
            echo "| :bust_in_silhouette: GitHub Actor | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
            echo "| :tada: GitHub Event    | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
            echo "| :package: OS           | $(uname -s)            |" >> $GITHUB_STEP_SUMMARY
            echo "| :package: OS Version   | $(uname -v)            |" >> $GITHUB_STEP_SUMMARY
          }

      - name: Summary of the previously generated CSV files
        shell: python
        run: |
          import os
          import sys
          import hashlib
          from pathlib import Path
          
          def human_readable_size(size):
              size_suffixes = ['B', 'KB', 'MB', 'GB', 'TB']
              size_index = 0
              while size >= 1024 and size_index < len(size_suffixes):
                  size /= 1024
                  size_index += 1
              return f'{size:.2f} {size_suffixes[size_index]}'
          
          wd = Path('wd')
          if not wd.exists():
              print('No wd directory', file=sys.stderr)
              sys.exit(0)

          files: list[Path] = sorted(set(wd.rglob('*.csv'))) + sorted(set(wd.rglob('*.json')))
          if len(files) == 0:
              print('No CSV files previously generated')
              sys.exit(0)
          
          with open(os.getenv('GITHUB_STEP_SUMMARY'), 'a') as step_summary:
              step_summary.write('## :file_folder: **Previously** Generated CSV files\n')
              step_summary.write('| Name               | blake2s Hash                  | File Size                    |\n')
              step_summary.write('|-------------------------|------------------------------|------------------------------|\n')
              for file in files:
                  hash = hashlib.blake2s(file.read_bytes())
                  size = file.stat().st_size
                  step_summary.write(f"| {file.relative_to(wd)} | {hash.hexdigest()} | {human_readable_size(size)} |\n")

      - name: Run WowAHaha
        if: (vars.ALLOWED_ACTOR || github.repository_owner) == github.actor || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        timeout-minutes: 10
        id: run
        run: |
          mkdir -p wd
          cd wd
          $env:AHaha_BattleNetWebApi:clientId='${{ secrets.BattleNetClientId }}';
          $env:AHaha_BattleNetWebApi:clientSecret='${{ secrets.BattleNetClientSecret }}';
          $env:AHaha_BattleNetWebApi:CredentialEncryptionKey='${{ secrets.BattleNetCredentialEncryptionKey }}';
          dotnet run --no-build --configuration Release --project "../${{ env.PROGRAM_NAME }}"
        shell: pwsh

      - name: Summary of the generated CSV files
        shell: python
        run: |
          import os
          import sys
          import hashlib
          from pathlib import Path
          
          def human_readable_size(size):
              size_suffixes = ['B', 'KB', 'MB', 'GB', 'TB']
              size_index = 0
              while size >= 1024 and size_index < len(size_suffixes):
                  size /= 1024
                  size_index += 1
              return f'{size:.2f} {size_suffixes[size_index]}'
          
          wd = Path('wd')
          if not wd.exists():
              print('No wd directory', file=sys.stderr)
              sys.exit(1)

          files: list[Path] = sorted(set(wd.rglob('*.csv'))) + sorted(set(wd.rglob('*.json')))
          if len(files) == 0:
              print('No CSV files generated', file=sys.stderr)
              sys.exit(1)
          
          with open(os.getenv('GITHUB_STEP_SUMMARY'), 'a') as step_summary:
              step_summary.write('## :file_folder: **Newly** Generated CSV files\n')
              step_summary.write('| Name               | blake2s Hash                  | File Size                    |\n')
              step_summary.write('|-------------------------|------------------------------|------------------------------|\n')
              for file in files:
                  hash = hashlib.blake2s(file.read_bytes())
                  size = file.stat().st_size
                  step_summary.write(f"| {file.relative_to(wd)} | {hash.hexdigest()} | {human_readable_size(size)} |\n")

      - name: Attest Build Provenance of csv files
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'wd/*'

      - name: Create artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.PROGRAM_NAME }}_csv
          path: wd/*
          retention-days: 90
          
      - name: Create a zip file of csv files
        id: csv_zip
        run: |
          file_name="${{ env.RELEASE_CSV_PREFIX }}}$(date +'%Y-%m-%d_%H-%M-%S').zip"
          7z a "$file_name" wd/*
          size=$(wc -c < "$file_name")
          echo "zip_file_name=$file_name" >> $GITHUB_OUTPUT
          echo "zip_file_size=$size" >> $GITHUB_OUTPUT
          if [ $size -lt 50000 ]; then
            echo "The resulting zip file is too small ($size bytes). Aborting." 1>&2
            exit 1
          fi
        
      - uses: rickstaa/action-create-tag@v1
        if: (vars.ALLOWED_ACTOR || github.repository_owner) == github.actor && (env.FORCE_RELEASE == 'true' || (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'))
        id: "tag_create"
        with:
          tag: ${{ env.LATEST_CSV_TAG }}
          tag_exists_error: false
          force_push_tag: true

      - name: Create a new release
        uses: ncipollo/release-action@v1
        if: (vars.ALLOWED_ACTOR || github.repository_owner) == github.actor && (env.FORCE_RELEASE == 'true' || (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'))
        with:
          allowUpdates: true
          artifactErrorsFailBuild: true
          artifacts: "${{ steps.csv_zip.outputs.zip_file_name }}"
          name: Latest csv files
          body: |
            This is an automated release of the latest csv files.
          draft: false
          prerelease: false
          make_latest: true
          replacesArtifacts: true
          #owner: ${{ github.actor }}
          tag: ${{ env.LATEST_CSV_TAG }}